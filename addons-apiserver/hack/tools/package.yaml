apiVersion: data.packaging.carvel.dev/v1alpha1
kind: Package
metadata:
  name: contour.community.tanzu.vmware.com.1.19.1
spec:
  refName: contour.community.tanzu.vmware.com
  version: 1.19.1
  releaseNotes: "contour 1.19.1 https://github.com/projectcontour/contour/releases/tag/v1.19.1"
  releasedAt: 2021-10-26T00:00:00Z
  licenses:
    - "Apache 2.0"
  template:
    spec:
      fetch:
        - imgpkgBundle:
            image: projects.registry.vmware.com/tce/contour@sha256:0f8c8db4d24c491cd36159dbdf2949bb0f3b385d2ba67d56a66dd3189d925e24
      template:
        - ytt:
            paths:
              - config/
        - kbld:
            paths:
              - "-"
              - .imgpkg/images.yml
      deploy:
        - kapp: {}
  capacityRequirementsDescription: "Varies significantly based on number of Services, Ingresses/HTTPProxies, etc. A starting point is 128MB RAM and 0.5 CPU for each Contour and Envoy pod, but this can and should be tuned based on observed usage."
  valuesSchema:
    openAPIv3:
      title: contour.community.tanzu.vmware.com.1.19.1 values schema
      properties:
        namespace:
          type: string
          description: The namespace in which to deploy Contour and Envoy.
          default: projectcontour
        contour:
          type: object
          description: Settings for the Contour component.
          properties:
            configFileContents:
              type: object
              additionalProperties: true
              description: The YAML contents of the Contour config file. See https://projectcontour.io/docs/v1.19.1/configuration/#configuration-file for more information.
            replicas:
              type: integer
              description: How many Contour pod replicas to have.
              default: 2
            useProxyProtocol:
              type: boolean
              description: Whether to enable PROXY protocol for all Envoy listeners.
              default: false
            logLevel:
              type: string
              description: The Contour log level. Valid options are info and debug.
              default: info
        envoy:
          type: object
          description: Settings for the Envoy component.
          properties:
            service:
              type: object
              description: Envoy service settings.
              properties:
                type:
                  type: string
                  description: The type of Kubernetes service to provision for Envoy.
                  default: LoadBalancer
                externalTrafficPolicy:
                  type: string
                  description: The external traffic policy for the Envoy service.
                  default: Local
                annotations:
                  type: object
                  additionalProperties: string
                  description: Annotations to set on the Envoy service.
                nodePorts:
                  type: object
                  description: NodePort settings for the Envoy service. If type is not NodePort, these settings are ignored.
                  properties:
                    http:
                      type: integer
                      description: If type == NodePort, the node port number to expose Envoy's HTTP listener on. If not specified, a node port will be auto-assigned by Kubernetes.
                    https:
                      type: integer
                      description: If type == NodePort, the node port number to expose Envoy's HTTPS listener on. If not specified, a node port will be auto-assigned by Kubernetes.
            hostPorts:
              type: object
              description: Host port settings for the Envoy pods.
              properties:
                enable:
                  type: boolean
                  description: Whether to enable host ports. If false, http and https are ignored.
                  default: false
                http:
                  type: integer
                  description: If enable == true, the host port number to expose Envoy's HTTP listener on.
                  default: 80
                https:
                  type: integer
                  description: If enable == true, the host port number to expose Envoy's HTTPS listener on.
                  default: 443
            hostNetwork:
              type: boolean
              description: Whether to enable host networking for the Envoy pods.
              default: false
            terminationGracePeriodSeconds:
              type: integer
              description: The termination grace period, in seconds, for the Envoy pods.
              default: 300
            logLevel:
              type: string
              description: The Envoy log level.
              default: info
        certificates:
          type: object
          description: Settings for the TLS certificates for securing communication between Contour and Envoy.
          properties:
            useCertManager:
              type: boolean
              description: Whether to use cert-manager to provision TLS certificates for securing communication between Contour and Envoy. If false, the upstream Contour certgen job will be used to provision certificates. If true, the cert-manager addon must be installed in the cluster.
              default: false
            duration:
              type: string
              description: If using cert-manager, how long the certificates should be valid for. If useCertManager is false, this field is ignored.
              default: 8760h
            renewBefore:
              type: string
              description: If using cert-manager, how long before expiration the certificates should be renewed. If useCertManager is false, this field is ignored.
              default: 360h
---
apiVersion: run.tanzu.vmware.com/v1alpha1
kind: AddonConfig
metadata:
  name: antrea-addon-config
  namespace: default
  labels:
    tkg.tanzu.vmware.com/cluster-name: workload-cluster-1
spec:
  # required
  packageRef: antrea.tanzu.vmware.com.0.13.3+vmware.1-tkg.1
  # required
  clusterRef: workload-cluster-1
  # optional, filled out by CRD webhook based on schema of Package
  # if provided, validated by CRD webhook against schema of Package
  values:
    - secretRef:
        name: antrea-data-values

---
# antrea package 0.13.3+vmware.1-tkg.1
apiVersion: data.packaging.carvel.dev/v1alpha1
kind: Package
metadata:
  name: antrea.tanzu.vmware.com.0.13.3+vmware.1-tkg.1
  namespace: default
spec:
  licenses:
    - 'VMwareâ€™s End User License Agreement (Underlying OSS license: Apache License 2.0)'
  refName: antrea.tanzu.vmware.com
  releaseNotes: antrea 0.13.3 https://github.com/antrea-io/antrea/releases/tag/v0.13.3
  releasedAt: "2021-08-28T22:51:40Z"
  # define schema for each core package, kapp doesn't do anything with this today
  valuesSchema:
    openAPIv3:
      title: antrea.tanzu.vmware.com.0.13.3+vmware.1-tkg.1 values schema
      properties:
        infraProvider:
          type: string
          description: Infra provider.
          enum: [vsphere, aws, azure]
        serviceCIDR:
          type: string
          default: 100.64.0.0/13
          # use extension properties to link to ClusterClass variables
          x-clusterclass-var: SERVICE_CIDR
        trafficEncapMode:
          type: string
          default: encap
          x-clusterclass-var: ANTREA_TRAFFIC_ENCAP_MODE