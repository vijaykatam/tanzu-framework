// Copyright 2021 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/vmware-tanzu/tanzu-framework/addons-apiserver/pkg/apis/addon/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeAddonConfigSpecs implements AddonConfigSpecInterface
type FakeAddonConfigSpecs struct {
	Fake *FakeAddonV1alpha1
	ns   string
}

var addonconfigspecsResource = schema.GroupVersionResource{Group: "addon.tanzu.vmware.com", Version: "v1alpha1", Resource: "addonconfigspecs"}

var addonconfigspecsKind = schema.GroupVersionKind{Group: "addon.tanzu.vmware.com", Version: "v1alpha1", Kind: "AddonConfigSpec"}

// Get takes name of the addonConfigSpec, and returns the corresponding addonConfigSpec object, and an error if there is any.
func (c *FakeAddonConfigSpecs) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.AddonConfigSpec, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(addonconfigspecsResource, c.ns, name), &v1alpha1.AddonConfigSpec{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AddonConfigSpec), err
}

// List takes label and field selectors, and returns the list of AddonConfigSpecs that match those selectors.
func (c *FakeAddonConfigSpecs) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.AddonConfigSpecList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(addonconfigspecsResource, addonconfigspecsKind, c.ns, opts), &v1alpha1.AddonConfigSpecList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AddonConfigSpecList), err
}

// Watch returns a watch.Interface that watches the requested addonConfigSpecs.
func (c *FakeAddonConfigSpecs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(addonconfigspecsResource, c.ns, opts))

}

// Create takes the representation of a addonConfigSpec and creates it.  Returns the server's representation of the addonConfigSpec, and an error, if there is any.
func (c *FakeAddonConfigSpecs) Create(ctx context.Context, addonConfigSpec *v1alpha1.AddonConfigSpec, opts v1.CreateOptions) (result *v1alpha1.AddonConfigSpec, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(addonconfigspecsResource, c.ns, addonConfigSpec), &v1alpha1.AddonConfigSpec{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AddonConfigSpec), err
}

// Update takes the representation of a addonConfigSpec and updates it. Returns the server's representation of the addonConfigSpec, and an error, if there is any.
func (c *FakeAddonConfigSpecs) Update(ctx context.Context, addonConfigSpec *v1alpha1.AddonConfigSpec, opts v1.UpdateOptions) (result *v1alpha1.AddonConfigSpec, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(addonconfigspecsResource, c.ns, addonConfigSpec), &v1alpha1.AddonConfigSpec{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AddonConfigSpec), err
}

// Delete takes name of the addonConfigSpec and deletes it. Returns an error if one occurs.
func (c *FakeAddonConfigSpecs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(addonconfigspecsResource, c.ns, name), &v1alpha1.AddonConfigSpec{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeAddonConfigSpecs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(addonconfigspecsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.AddonConfigSpecList{})
	return err
}

// Patch applies the patch and returns the patched addonConfigSpec.
func (c *FakeAddonConfigSpecs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.AddonConfigSpec, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(addonconfigspecsResource, c.ns, name, pt, data, subresources...), &v1alpha1.AddonConfigSpec{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.AddonConfigSpec), err
}
