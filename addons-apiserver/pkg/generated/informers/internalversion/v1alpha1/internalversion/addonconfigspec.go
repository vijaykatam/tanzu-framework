// Copyright 2021 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by informer-gen. DO NOT EDIT.

package internalversion

import (
	"context"
	time "time"

	v1alpha1 "github.com/vmware-tanzu/tanzu-framework/addons-apiserver/pkg/apis/addon/v1alpha1"
	internalinterfaces "github.com/vmware-tanzu/tanzu-framework/addons-apiserver/pkg/generated/informers/internalversion/internalinterfaces"
	internalversion "github.com/vmware-tanzu/tanzu-framework/addons-apiserver/pkg/generated/listers/v1alpha1/internalversion"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	internalclientset "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
)

// AddonConfigSpecInformer provides access to a shared informer and lister for
// AddonConfigSpecs.
type AddonConfigSpecInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() internalversion.AddonConfigSpecLister
}

type addonConfigSpecInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewAddonConfigSpecInformer constructs a new informer for AddonConfigSpec type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAddonConfigSpecInformer(client internalclientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredAddonConfigSpecInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredAddonConfigSpecInformer constructs a new informer for AddonConfigSpec type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAddonConfigSpecInformer(client internalclientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.Addon().AddonConfigSpecs(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.Addon().AddonConfigSpecs(namespace).Watch(context.TODO(), options)
			},
		},
		&v1alpha1.AddonConfigSpec{},
		resyncPeriod,
		indexers,
	)
}

func (f *addonConfigSpecInformer) defaultInformer(client internalclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredAddonConfigSpecInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *addonConfigSpecInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&v1alpha1.AddonConfigSpec{}, f.defaultInformer)
}

func (f *addonConfigSpecInformer) Lister() internalversion.AddonConfigSpecLister {
	return internalversion.NewAddonConfigSpecLister(f.Informer().GetIndexer())
}
