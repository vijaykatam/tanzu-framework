// Copyright 2021 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/tanzu-framework/addons-apiserver/pkg/apis/addon/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AddonConfigSpecLister helps list AddonConfigSpecs.
// All objects returned here must be treated as read-only.
type AddonConfigSpecLister interface {
	// List lists all AddonConfigSpecs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AddonConfigSpec, err error)
	// AddonConfigSpecs returns an object that can list and get AddonConfigSpecs.
	AddonConfigSpecs(namespace string) AddonConfigSpecNamespaceLister
	AddonConfigSpecListerExpansion
}

// addonConfigSpecLister implements the AddonConfigSpecLister interface.
type addonConfigSpecLister struct {
	indexer cache.Indexer
}

// NewAddonConfigSpecLister returns a new AddonConfigSpecLister.
func NewAddonConfigSpecLister(indexer cache.Indexer) AddonConfigSpecLister {
	return &addonConfigSpecLister{indexer: indexer}
}

// List lists all AddonConfigSpecs in the indexer.
func (s *addonConfigSpecLister) List(selector labels.Selector) (ret []*v1alpha1.AddonConfigSpec, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AddonConfigSpec))
	})
	return ret, err
}

// AddonConfigSpecs returns an object that can list and get AddonConfigSpecs.
func (s *addonConfigSpecLister) AddonConfigSpecs(namespace string) AddonConfigSpecNamespaceLister {
	return addonConfigSpecNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AddonConfigSpecNamespaceLister helps list and get AddonConfigSpecs.
// All objects returned here must be treated as read-only.
type AddonConfigSpecNamespaceLister interface {
	// List lists all AddonConfigSpecs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AddonConfigSpec, err error)
	// Get retrieves the AddonConfigSpec from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AddonConfigSpec, error)
	AddonConfigSpecNamespaceListerExpansion
}

// addonConfigSpecNamespaceLister implements the AddonConfigSpecNamespaceLister
// interface.
type addonConfigSpecNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AddonConfigSpecs in the indexer for a given namespace.
func (s addonConfigSpecNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AddonConfigSpec, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AddonConfigSpec))
	})
	return ret, err
}

// Get retrieves the AddonConfigSpec from the indexer for a given namespace and name.
func (s addonConfigSpecNamespaceLister) Get(name string) (*v1alpha1.AddonConfigSpec, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("addonconfigspec"), name)
	}
	return obj.(*v1alpha1.AddonConfigSpec), nil
}
